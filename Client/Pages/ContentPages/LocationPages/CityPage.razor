@* @using Client.Pages.ContentPages.LocationPages *@
@implements IDisposable
@if (allState.ShowCity)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="float-start">Ciudades</h4>
                        <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                            <i class="bi bi-plus-circle-dotted"></i> Add País
                        </button>
                    </div>
                    <div class="card-body" style="max-height:580px; overflow-x:hidden; overflow:scroll;">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">País</th>
                                    <th scope="col">Ciudad</th>
                                    <th scope="col">Acción</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Cities is not null )
                                {
                                    int count = 1;
                                    foreach (var item in Cities)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Country!.Name</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info cursorStyle" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">No Country added yet!</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<CityDialog @ref="cityDialog"
               HandleSaveOperationEvent="HandleSaveOperationEvent"
               City="City"
               Countries="Countries" />

@code {
    CityDialog? cityDialog;
    City City = new();
    public string Title { get; set; } = "Add";
    public List<City> Cities { get; set; } = new();
    public List<Country> Countries { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetCities();
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCities()
    {
        try
        {
            Cities = await cityService.GetAll(Constants.CityBaseUrl);
        }
        catch (Exception ex)
        {
            await dialogService.AlertAsync($"Error loading cities: {ex.Message}", "Error");
        }
    }

    private async Task GetCountries()
    {
        try
        {
            Countries = await countryService.GetAll(Constants.CountryBaseUrl);
        }
        catch (Exception ex)
        {
            await dialogService.AlertAsync($"Error loading countries: {ex.Message}", "Error");
        }
    }

    void AddButtonClicked()
    {
        cityDialog?.ChangeTitle("Add");
        City = new();
        OpenDialog();
    }

    void OpenDialog()
    {
        cityDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(City city)
    {
        bool successCheck = false;
        if (city.Id > 0)
        {
            var result = await cityService.UpDate(city, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await cityService.Insert(City, Constants.CityBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            City = new();
            await GetCities(); // Refresca la lista de ciudades
            cityDialog?.ChangeTitle("Add");
        }
    }


    // private async Task HandleSaveOperationEvent(City city)
    // {
    //     bool successCheck = false;
    //     if (city.Id > 0)
    //     {
    //         var result = await cityService.UpDate(city, Constants.CityBaseUrl);
    //         successCheck = await DisplayMessage(result.Flag, result.Message);
    //     }
    //     else
    //     {
    //         var response = await cityService.Insert(City, Constants.CityBaseUrl);
    //         successCheck = await DisplayMessage(response.Flag, response.Message);
    //     }

    //     if (successCheck)
    //     {
    //         City = new();
    //         await GetCountries();
    //         cityDialog?.ChangeTitle("Add");
    //     }
    // }

    private void EditClicked(City city)
    {
        cityDialog?.ChangeTitle("Update");
        City = city;
        OpenDialog();
    }

    private async Task DeleteClicked(City city)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {city.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await branchService.DeleteById(city.Id, Constants.CityBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            await GetCities();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        // Agrega un punto de interrupción o un log aquí para verificar el valor de 'flag'
        Console.WriteLine($"Flag value: {flag}"); // Considera usar un logger en lugar de Console si es una aplicación de producción

        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }


    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
