@implements IDisposable

@if (allState.ShowVacation)
{
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card shadow-lg border-info">
                    <div class="card-header">
                        <h4 class="float-start">Manage Employees Vacation</h4>
                    </div>
                    <div class="card-body">
                        @{
                            var Tool = (new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" });
                        }
                        <SfGrid DataSource="Vacations" AllowPaging="true" AllowSorting="true" Toolbar="@Tool"
                            AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                            <GridPageSettings PageSize="5"></GridPageSettings>
                            <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Vacation"></GridEvents>
                            <GridColumns>
                                <GridColumn Field=@nameof(Vacation.EmployeeId) HeaderText="ID"></GridColumn>
                                <GridColumn Field=@nameof(Vacation.EmployeeName) HeaderText="Name"></GridColumn>
                                <GridColumn Field=@nameof(Vacation.EmployeeEmail) HeaderText="Email"></GridColumn>
                                <GridColumn HeaderText="Type">
                                    <Template>
                                        @{
                                            var item = (context as Vacation);
                                            if (item?.VacationType != null)
                                            {
                                                <div>@item.VacationType.Name</div>
                                            }
                                            else
                                            {
                                                <div>Information not available</div>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Vacation.StartDate) HeaderText="Start Date"></GridColumn>
                                <GridColumn Field=@nameof(Vacation.EndDate) HeaderText="End Date">
                                    <Template>
                                        @{
                                            var vacation = context as Vacation;
                                            <span>@(vacation?.EndDate.ToString("yyyy-MM-dd") ?? "N/A")</span>
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(Vacation.NumberOfDays) HeaderText="Number of days"></GridColumn>
                                <GridColumn HeaderText="Action">
                                    <Template>
                                        @{
                                            var employee = (context as Vacation);
                                            <div>
                                                <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(employee!)"></i>
                                                <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(employee!)"></i>
                                            </div>
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    #cursorStyle {
        cursor: pointer;
    }
</style>

<VacationDialog @ref="vacationDialog"
                ItemModel="ItemModel"
                VacationTypes="VacationTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    SfGrid<Vacation>? DefaultGrid;
    VacationDialog? vacationDialog;
    Vacation ItemModel = new();
    public List<Vacation> Vacations { get; set; } = new();
    public List<VacationType> VacationTypes { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetVacations();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() =>
        VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);


    @inject AuthenticationStateProvider AuthenticationStateProvider

    @inject IUserAccountService accountService
    
    private async Task GetVacations()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                // Busca el claim de correo electrónico en lugar del nombre de usuario
                var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
                var email = emailClaim?.Value; // Esto contendrá el correo electrónico del usuario autenticado

                var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();

                if (roles.Contains("Employee") && email != null)
                {
                    Vacations = await vacationService.GetByEmployeeEmail(email, Constants.VacationBaseUrl);
                }
                else
                {
                    Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);
                }
            }
        }
        catch (HttpRequestException ex)
        {
            // Manejar el error y mostrar un mensaje al usuario
            Console.Error.WriteLine($"Error fetching vacations: {ex.Message}");
        }
        catch (Exception ex)
        {
            // Manejar cualquier otro tipo de error
            Console.Error.WriteLine($"Unexpected error: {ex.Message}");
        }
    }

    void OpenDialog() =>
        vacationDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Vacation item)
    {
        var result = await vacationService.UpDate(item, Constants.VacationBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetVacations();
        }
    }

    private void EditClicked(Vacation item)
    {
        ItemModel = item;
        OpenDialog();
    }

    private async Task DeleteClicked(Vacation item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete this?", "Confirm Delete");
        if (!confirm) return;

        var response = await vacationService.DeleteById(item.EmployeeId, Constants.VacationBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetVacations();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    // Excel export / PDF Export
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid?.ExportToExcelAsync()!;
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid?.ExportToPdfAsync()!;
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
