@if (allState.ShowOvertime)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card border-danger shadow-lg">
                    <div class="card-header">
                        <h4 class="float-start">Manage Employees Overtime</h4>
                    </div>
                    <div class="card-header" style="max-height: 580px; overflow-x:hidden; overflow-y:scroll;">
                        <div class="card-body">
                            @{
                                var Tool = new List<string>() { "Search", "ExcelExport", "PdfExport", "Print" };
                            }
                            <SfGrid DataSource="@Overtimes" AllowPaging="true" AllowSorting="true" Toolbar=@Tool
                                    AllowExcelExport="true" @ref="DefaultGrid" AllowPdfExport="true">
                                <GridPageSettings PageSize="5"></GridPageSettings>
                                <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Overtime"></GridEvents>
                                <GridColumns>
                                    <GridColumn Field=@nameof(Overtime.EmployeeId) HeaderText="ID"></GridColumn>
                                    <GridColumn Field=@nameof(Overtime.EmployeeName) HeaderText="Name"></GridColumn>
                                    <GridColumn Field=@nameof(Overtime.EmployeeEmail) HeaderText="Email"></GridColumn>
                                    @* <GridColumn Field=@nameof(Overtime.EmailEmployee) HeaderText="ID"></GridColumn> *@
                                    <GridColumn HeaderText="Type">
                                        <Template>
                                            @{
                                                var item = context as Overtime;
                                                if (item != null && item.OvertimeType != null)
                                                {
                                                    <div>@item.OvertimeType.Name</div>
                                                }
                                                else
                                                {
                                                    <div>Información no disponible</div>
                                                }
                                            }
                                        </Template>
                                    </GridColumn>
                                    <GridColumn HeaderText="Action">
                                        <Template>
                                            @{
                                                var employee = context as Overtime;
                                                if (employee != null)
                                                {
                                                    <div>
                                                        <i class="bi bi-pencil text-info" id="cursorStyle" @onclick="() => EditClicked(employee)"></i>
                                                        <i class="bi bi-trash text-danger" id="cursorStyle" @onclick="() => DeleteClicked(employee)"></i>
                                                    </div>
                                                }
                                            }
                                        </Template>
                                    </GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<OvertimeDialog @ref="overtimeDialog"
                ItemModel="ItemModel"
                OvertimeTypes="OvertimeTypes"
                HandleSaveOperationEvent="HandleSaveOperationEvent" />

@code {
    SfGrid<Overtime>? DefaultGrid;
    OvertimeDialog? overtimeDialog;
    Overtime ItemModel = new();
    public List<Overtime> Overtimes { get; set; } = new();
    public List<OvertimeType> OvertimeTypes { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTypes();
        await GetOvertime();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

  
    @inject AuthenticationStateProvider AuthenticationStateProvider

    @inject IUserAccountService accountService

    

    private async Task GetOvertime()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Busca el claim de correo electrónico en lugar del nombre de usuario
            var emailClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email);
            var email = emailClaim?.Value; // Esto contendrá el correo electrónico del usuario autenticado

            var roles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();

            if (roles.Contains("Employee") && email != null)
            {
                Overtimes = await overtimeService.GetByEmployeeEmail(email, Constants.OvertimeBaseUrl);
            }
            else
            {
                Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
            }
        }
    }


   // private async Task GetOvertime() => Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);

    void OpenDialog() => overtimeDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(Overtime item)
    {
        var result = await overtimeService.UpDate(item, Constants.OvertimeBaseUrl);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ItemModel = new();
            await GetOvertime();
        }
    }

    private void EditClicked(Overtime item)
    {
        ItemModel = item;
        OpenDialog();
    }

    private async Task DeleteClicked(Overtime item)
    {
        bool confirm = await dialogService.ConfirmAsync("Are you sure you wanna delete this?", "Confirm Delete");
        if (!confirm) return;
        var response = await overtimeService.DeleteById(item.EmployeeId, Constants.OvertimeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
            await GetOvertime();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    //Excel export / PDF Export
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Excel Export")
            await this.DefaultGrid!.ExportToExcelAsync();
        if (args.Item.Text == "PDF Export")
            await this.DefaultGrid!.ExportToPdfAsync();
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}